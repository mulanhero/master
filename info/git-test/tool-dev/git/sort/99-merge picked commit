Method 1:
1. checkout release 
2. merge trunk
3. revert commit1, commit2, commit3

Method 2:
assume we don't want merge commit behind trunk-x (e.g. x = 6):
1. checkout release
2. merge trunk~7 // 6+1
3. merge -s ours trunk~6 // mark this is merged
4. merge trunk



Sure, being in master branch all you need to do is:

git merge <commit-id>
where commit-id is hash of the last commit from newbranch 
that you want to get in your master branch.

You can find out more about any git command by doing 
git help <command>. It that case it's git help merge. 
And docs are saying that the last argument for merge 
command is <commit>..., so you can pass reference to 
any commit or even multiple commits. 
Though, I never did the latter myself.

----------------------------------------------------------
You can do this as follow step: 
git checkout master 
git cherry-pick < commit-id of newbranch's 4th commit >

Normally, this command will automatically merge 4th and commit to master. If you get merge conflict, you should manually resolve conflict and make commit yourself.


----------------
git push -f origin master